use std::cmp::max;

use fibonacci::Fibonacci;
use maths::lcm;
use primes;
use reduce::Reduce;

/// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get
/// 3, 5, 6 and 9. The sum of these multiples is 23.
/// ///
/// Find the sum of all the multiples of 3 or 5 below 1000.
#[allow(dead_code)]
pub fn p1() -> u64 {
    let max = |i| {
        let mut agg = 0;
        let mut next = 0;
        loop {
            next += i;
            if next >= 1000 {
                break;
            }
            agg += next;
        }
        agg
    };
    max(3) + max(5) - max(15)
}

/// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
/// By starting with 1 and 2, the first 10 terms will be:
///
/// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
///
/// By considering the terms in the Fibonacci sequence whose values do not exceed four million,
/// find the sum of the even-valued terms.
pub fn p2() -> u64 {
    let fibs = Fibonacci {
        current: 1,
        last: 0,
    };

     fibs
        .take_while(|i| *i < 4_000_000)
        .filter(|i| i % 2 == 0)
        .sum()
}

/// The prime factors of 13195 are 5, 7, 13 and 29.
///
/// What is the largest prime factor of the number 600851475143 ?
pub fn p3() -> u64 {
    let source = 600851475143;
    let mut upper_limit = (source as f64).sqrt() as u64 + 1;
    let mut target = source;
    let mut factor = 2;
    while factor <= upper_limit {
        while target % factor == 0 {
            target = target / factor;
        }
        factor += 1;
        upper_limit = (target as f64).sqrt() as u64 + 1;
    }
    max(target, factor)
}

/// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
///
/// Find the largest palindrome made from the product of two 3-digit numbers.
pub fn p4() -> u32 {
    let palindrome_from = |mut n: u32| {
        let mut p = n;
        while n > 0 {
            p *= 10;
            p += n % 10;
            n /= 10;
        }
        p
    };
    for i in (0..1000).rev() {
        let p = palindrome_from(i);
        let mut j = 999;
        while j * j >= p {
            if p % j == 0 {
                return p;
            }
            j -= 1;
        }
    }
    unreachable!()
}

/// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
///
/// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
pub fn p5() -> u32 {
    let max = 20;
    (1 .. max + 1).reduce(|a, b| lcm(a, b)).unwrap()
}

/// The sum of the squares of the first ten natural numbers is,
/// 1^2 + 2^2 + ... + 10^2 = 385
///
/// The square of the sum of the first ten natural numbers is,
/// (1 + 2 + ... + 10)^2 = 552 = 3025
///
/// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
///
/// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
pub fn p6() -> u64 {
    let mut sum_of_squares = 0;
    let mut sum = 0;
    for i in 1..101 {
        sum += i;
        sum_of_squares += i * i;
    }
    sum * sum - sum_of_squares
}

/// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
///
/// What is the 10 001st prime number?
pub fn p7() -> u64 {
    // primes::nth(10_001)
    let mut is_prime = [true; 120_000];
    let length = is_prime.len();
    primes::sieve(&mut is_prime);

    let mut count = 1;
    let mut i = 3;
    while i <= length {
        if is_prime[i] {
            count += 1;
            if count == 10001 {
                return i as u64;
            }
        }
        i += 2;
    }
    0
}